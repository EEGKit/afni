## current variable name
var.name <- names(data.df)[i]
if( endsWith(var.name,"Start") ){
## find the root and make a duration version
var.root <- strsplit(var.name,"Start")[[1]]
var.dur <- paste0(var.root,"Duration")
## calculate by seconds and convert from difftime class
data.df[[var.dur]] <- as.numeric(difftime(data.df[[paste0(var.root,"End")]],
data.df[[var.name]],
units="s"))
}
}   ## end duration calculation
## clean up ratings ##################################
## convert subject from number to factor
ratings.df$SubID <- factor(as.character(ratings.df$SubID))
# ## bech 6
# ratings.df$bech_6 <- c(ratings.df$HDRS_01 + ratings.df$HDRS_02 +
#                          ratings.df$HDRS_07 + ratings.df$HDRS_08 +
#                          ratings.df$HDRS_10 + ratings.df$HDRS_13)
## convert date to date and time object (at midnight)
ratings.df$DateTime <- as.POSIXct(as.character(ratings.df$Date),
origin="America/New_York",
format="%m/%d/%Y")
ratings.df$Date <- ratings.df$Bech_6 <- NULL
## phase letter
ratings.df$PhaseLetter <- sapply(ratings.df$Phase,PhaseLetter_fun)
## clean up cat ##################################
## convert subject from number to factor
cat.df$SubID <- factor(as.character(cat.df$SubID))
## convert date to date and time object (at midnight)
cat.df$DateTime <- as.POSIXct(as.character(cat.df$Date),
origin="America/New_York",
format="%m/%d/%Y")
cat.df$Date <- NULL
## phase letter
cat.df$PhaseLetter <- sapply(cat.df$Phase,PhaseLetter_fun)
## clean up emory ###################
## fix dates
emory.df$DateTime <- as.POSIXct(as.character(emory.df$Date),
origin="America/New_York",
format="%Y-%m-%d")
emory.df$Date <- NULL
## clean up events ####################
## fix dates
events.df$DateTime <- as.POSIXct(as.character(events.df$Date),
origin="America/New_York",
format="%m/%d/%Y")
events.df$Date <- NULL
events.df$PhaseLetter <- sapply(events.df$Phase,PhaseLetter_fun)
source('~/Documents/mayberglab/updated_lab_cat_ratings/Dates.R')
get_dates <- function(data.in,subID){
## subset by subject
data.out <- subset(data.in,data.in$SubID == subID)
## round out the times
data.out$Date <- floor_date(data.out$DateTime,unit="day")
## just get one per day
data.out <- data.out[!duplicated(data.out$Date),]
## only get wanted variables and reorder by day
data.out <- subset(data.out,select=c("SubID","Phase","Date"))
data.out <- data.out[order(data.out$Date),]
## calculate the year week and day of the week
data.out$Year <- epiyear(data.out$Date)
data.out$epiWeek <- epiweek(data.out$Date)
data.out$isoWeek <- isoweek(data.out$Date)
data.out$Day <- wday(data.out$Date,label=TRUE)
## what is sunday
data.out$Sunday <- floor_date(data.out$Date,unit="week",week_start=7)
data.out$Monday <- floor_date(data.out$Date,unit="week",week_start=1)
return(data.out)
}
match_dates <- function(subID){
## get data
slider.df <- get_dates(data.df,subID)
cat.df <- get_dates(cat.df,subID)
rating.df <- get_dates(ratings.df,subID)
## do slider
slider.week <- slider.df[!duplicated(slider.df$Phase),]
slider.week <- subset(slider.week,
select=c("SubID","Phase","isoWeek","Year","Monday"))
slider.week$PhaseSlider <- slider.week$Phase
slider.week$Phase <- NULL
## ratings
rating.week <- rating.df[!duplicated(rating.df$Phase),]
rating.week <- subset(rating.week,
select=c("SubID","Phase","isoWeek","Year","Monday"))
rating.week$PhaseRating <- rating.week$Phase
rating.week$Phase <- NULL
## cat mh
cat.week <- cat.df[!duplicated(cat.df$Phase),]
cat.week <- subset(cat.week,
select=c("SubID","Phase","isoWeek","Year","Monday"))
cat.week$PhaseCat <- cat.week$Phase
cat.week$Phase <- NULL
## merge, order, return
match.df <- merge(slider.week,rating.week,all=TRUE)
match.df <- merge(match.df,cat.week,all=TRUE)
match.df <- match.df[order(match.df$Monday),]
return(match.df)
}
match.802 <- match_dates("RCS802")
## all in one "lab" measures
ratings.df <- read.csv("data/ratings.csv")
cat.df <- read.csv("data/CAT.csv")
item.lut <- read.csv("data/item_LUT.csv")   ## not used
## slider "home" measures
slider.list <- list.files(path="data",pattern="RCS*",full.names=TRUE)
file_list <- lapply(slider.list,fread,stringsAsFactors=TRUE,na.strings="")
data.df <- rbindlist(file_list,use.names=TRUE,fill=TRUE)
rm(list=c("file_list"))
## emory redcap
emory.df <- read.csv("data/emory_redcap_cleanish.csv")
## events file
events.df <- read.csv("data/events.csv")
## clean up variable types for slider data ########################
## get rid of fake zeros
data.df <- data.df[!(is.na(data.df$MoodAssessmentStart)),]
## make main phase by letter
data.df$PhaseLetter <- sapply(data.df$Phase,PhaseLetter_fun)
data.df$PhaseLetter <- factor(data.df$PhaseLetter)
## make DateTime variable from Session name
data.df$DateTime <- sapply(data.df$Session,DateTime_fun)
data.df$DateTime <- as.POSIXct(data.df$DateTime,origin="America/New_York",
format="%Y-%m-%d %H:%M:%OS")
## convert empty times to NA
data.df[data.df == "0001-01-01T00:00:00"]  <- NA
## fix date/times by checking variable name and converting to time class
for( i in 1:length(data.df) ){
var.name <- names(data.df)[i]
if( endsWith(var.name,"End") | endsWith(var.name,"Start") ){
data.df[[var.name]] <- as.POSIXct(data.df[[var.name]],
format="%Y-%m-%dT%H:%M:%OS")
}
}
## convert subject from number to factor
ratings.df$SubID <- factor(as.character(ratings.df$SubID))
# ## bech 6
# ratings.df$bech_6 <- c(ratings.df$HDRS_01 + ratings.df$HDRS_02 +
#                          ratings.df$HDRS_07 + ratings.df$HDRS_08 +
#                          ratings.df$HDRS_10 + ratings.df$HDRS_13)
## convert date to date and time object (at midnight)
ratings.df$DateTime <- as.POSIXct(as.character(ratings.df$Date),
origin="America/New_York",
format="%m/%d/%Y")
ratings.df$Date <- ratings.df$Bech_6 <- NULL
## phase letter
ratings.df$PhaseLetter <- sapply(ratings.df$Phase,PhaseLetter_fun)
## convert subject from number to factor
cat.df$SubID <- factor(as.character(cat.df$SubID))
## convert date to date and time object (at midnight)
cat.df$DateTime <- as.POSIXct(as.character(cat.df$Date),
origin="America/New_York",
format="%m/%d/%Y")
cat.df$Date <- NULL
## phase letter
cat.df$PhaseLetter <- sapply(cat.df$Phase,PhaseLetter_fun)
source('~/Documents/mayberglab/updated_lab_cat_ratings/Dates.R')
suppressPackageStartupMessages(library(shiny))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(shinydashboard))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(RColorBrewer))
suppressPackageStartupMessages(library(scales))
# suppressPackageStartupMessages(library(openxlsx))
## clean up
rm(list=ls())
## for the wrong dates on the server
Sys.setenv(TZ="America/New_York")
## helper functions #############################
## for extracting phase letter
PhaseLetter_fun <- function(Phase){
if( Phase %in% c("Surgery","TurnOn","Screening","Pre") ){
PhaseOut <- as.character(Phase)
} else {
PhaseOut <- substr(as.character(Phase),1,1)
}
return(PhaseOut)
}
## for extracting date/time from session string
DateTime_fun <- function(dt){
## split by _
dt.txt <- strsplit(as.character(dt),"_")[[1]]
len.dt <- length(dt.txt) ## start from the end
## make string for date time
dt.out <- paste0(dt.txt[len.dt-5],"-",
dt.txt[len.dt-4],"-",
dt.txt[len.dt-3]," ",
dt.txt[len.dt-2],":",
dt.txt[len.dt-1],":",
dt.txt[len.dt])
return(dt.out)
}
## import csv's ####################################
## all in one "lab" measures
ratings.df <- read.csv("data/ratings.csv")
cat.df <- read.csv("data/CAT.csv")
item.lut <- read.csv("data/item_LUT.csv")   ## not used
## slider "home" measures
slider.list <- list.files(path="data",pattern="RCS*",full.names=TRUE)
file_list <- lapply(slider.list,fread,stringsAsFactors=TRUE,na.strings="")
data.df <- rbindlist(file_list,use.names=TRUE,fill=TRUE)
rm(list=c("file_list"))
## emory redcap
emory.df <- read.csv("data/emory_redcap_cleanish.csv")
## events file
events.df <- read.csv("data/events.csv")
## clean up variable types for slider data ########################
## get rid of fake zeros
data.df <- data.df[!(is.na(data.df$MoodAssessmentStart)),]
## make main phase by letter
data.df$PhaseLetter <- sapply(data.df$Phase,PhaseLetter_fun)
data.df$PhaseLetter <- factor(data.df$PhaseLetter)
## make DateTime variable from Session name
data.df$DateTime <- sapply(data.df$Session,DateTime_fun)
data.df$DateTime <- as.POSIXct(data.df$DateTime,origin="America/New_York",
format="%Y-%m-%d %H:%M:%OS")
## convert empty times to NA
data.df[data.df == "0001-01-01T00:00:00"]  <- NA
## fix date/times by checking variable name and converting to time class
for( i in 1:length(data.df) ){
var.name <- names(data.df)[i]
if( endsWith(var.name,"End") | endsWith(var.name,"Start") ){
data.df[[var.name]] <- as.POSIXct(data.df[[var.name]],
format="%Y-%m-%dT%H:%M:%OS")
}
}
## calculate assessment durations ################################
for( i in 1:length(data.df) ){
## current variable name
var.name <- names(data.df)[i]
if( endsWith(var.name,"Start") ){
## find the root and make a duration version
var.root <- strsplit(var.name,"Start")[[1]]
var.dur <- paste0(var.root,"Duration")
## calculate by seconds and convert from difftime class
data.df[[var.dur]] <- as.numeric(difftime(data.df[[paste0(var.root,"End")]],
data.df[[var.name]],
units="s"))
}
}   ## end duration calculation
suppressPackageStartupMessages(library(shiny))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(shinydashboard))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(RColorBrewer))
suppressPackageStartupMessages(library(scales))
# suppressPackageStartupMessages(library(openxlsx))
## clean up
rm(list=ls())
## for the wrong dates on the server
Sys.setenv(TZ="America/New_York")
## helper functions #############################
## for extracting phase letter
PhaseLetter_fun <- function(Phase){
if( Phase %in% c("Surgery","TurnOn","Screening","Pre") ){
PhaseOut <- as.character(Phase)
} else {
PhaseOut <- substr(as.character(Phase),1,1)
}
return(PhaseOut)
}
## for extracting date/time from session string
DateTime_fun <- function(dt){
## split by _
dt.txt <- strsplit(as.character(dt),"_")[[1]]
len.dt <- length(dt.txt) ## start from the end
## make string for date time
dt.out <- paste0(dt.txt[len.dt-5],"-",
dt.txt[len.dt-4],"-",
dt.txt[len.dt-3]," ",
dt.txt[len.dt-2],":",
dt.txt[len.dt-1],":",
dt.txt[len.dt])
return(dt.out)
}
## import csv's ####################################
## all in one "lab" measures
ratings.df <- read.csv("data/ratings.csv")
cat.df <- read.csv("data/CAT.csv")
item.lut <- read.csv("data/item_LUT.csv")   ## not used
## slider "home" measures
slider.list <- list.files(path="data",pattern="RCS*",full.names=TRUE)
file_list <- lapply(slider.list,fread,stringsAsFactors=TRUE,na.strings="")
data.df <- rbindlist(file_list,use.names=TRUE,fill=TRUE)
rm(list=c("file_list"))
## emory redcap
emory.df <- read.csv("data/emory_redcap_cleanish.csv")
## events file
events.df <- read.csv("data/events.csv")
## clean up variable types for slider data ########################
## get rid of fake zeros
data.df <- data.df[!(is.na(data.df$MoodAssessmentStart)),]
## make main phase by letter
data.df$PhaseLetter <- sapply(data.df$Phase,PhaseLetter_fun)
data.df$PhaseLetter <- factor(data.df$PhaseLetter)
## make DateTime variable from Session name
data.df$DateTime <- sapply(data.df$Session,DateTime_fun)
data.df$DateTime <- as.POSIXct(data.df$DateTime,origin="America/New_York",
format="%Y-%m-%d %H:%M:%OS")
## convert empty times to NA
data.df[data.df == "0001-01-01T00:00:00"]  <- NA
## fix date/times by checking variable name and converting to time class
for( i in 1:length(data.df) ){
var.name <- names(data.df)[i]
if( endsWith(var.name,"End") | endsWith(var.name,"Start") ){
data.df[[var.name]] <- as.POSIXct(data.df[[var.name]],
format="%Y-%m-%dT%H:%M:%OS")
}
}
## calculate assessment durations ################################
for( i in 1:length(data.df) ){
## current variable name
var.name <- names(data.df)[i]
if( endsWith(var.name,"Start") ){
## find the root and make a duration version
var.root <- strsplit(var.name,"Start")[[1]]
var.dur <- paste0(var.root,"Duration")
## calculate by seconds and convert from difftime class
data.df[[var.dur]] <- as.numeric(difftime(data.df[[paste0(var.root,"End")]],
data.df[[var.name]],
units="s"))
}
}   ## end duration calculation
suppressPackageStartupMessages(library(shiny))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(shinydashboard))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(RColorBrewer))
suppressPackageStartupMessages(library(scales))
# suppressPackageStartupMessages(library(openxlsx))
## clean up
rm(list=ls())
## for the wrong dates on the server
Sys.setenv(TZ="America/New_York")
## helper functions #############################
## for extracting phase letter
PhaseLetter_fun <- function(Phase){
if( Phase %in% c("Surgery","TurnOn","Screening","Pre") ){
PhaseOut <- as.character(Phase)
} else {
PhaseOut <- substr(as.character(Phase),1,1)
}
return(PhaseOut)
}
## for extracting date/time from session string
DateTime_fun <- function(dt){
## split by _
dt.txt <- strsplit(as.character(dt),"_")[[1]]
len.dt <- length(dt.txt) ## start from the end
## make string for date time
dt.out <- paste0(dt.txt[len.dt-5],"-",
dt.txt[len.dt-4],"-",
dt.txt[len.dt-3]," ",
dt.txt[len.dt-2],":",
dt.txt[len.dt-1],":",
dt.txt[len.dt])
return(dt.out)
}
## import csv's ####################################
## all in one "lab" measures
ratings.df <- read.csv("data/ratings.csv")
cat.df <- read.csv("data/CAT.csv")
item.lut <- read.csv("data/item_LUT.csv")   ## not used
## slider "home" measures
slider.list <- list.files(path="data",pattern="RCS*",full.names=TRUE)
file_list <- lapply(slider.list,fread,stringsAsFactors=TRUE,na.strings="")
data.df <- rbindlist(file_list,use.names=TRUE,fill=TRUE)
rm(list=c("file_list"))
## emory redcap
emory.df <- read.csv("data/emory_redcap_cleanish.csv")
## events file
events.df <- read.csv("data/events.csv")
## clean up variable types for slider data ########################
## get rid of fake zeros
data.df <- data.df[!(is.na(data.df$MoodAssessmentStart)),]
## make main phase by letter
data.df$PhaseLetter <- sapply(data.df$Phase,PhaseLetter_fun)
data.df$PhaseLetter <- factor(data.df$PhaseLetter)
## make DateTime variable from Session name
data.df$DateTime <- sapply(data.df$Session,DateTime_fun)
data.df$DateTime <- as.POSIXct(data.df$DateTime,origin="America/New_York",
format="%Y-%m-%d %H:%M:%OS")
## convert empty times to NA
data.df[data.df == "0001-01-01T00:00:00"]  <- NA
## fix date/times by checking variable name and converting to time class
for( i in 1:length(data.df) ){
var.name <- names(data.df)[i]
if( endsWith(var.name,"End") | endsWith(var.name,"Start") ){
data.df[[var.name]] <- as.POSIXct(data.df[[var.name]],
format="%Y-%m-%dT%H:%M:%OS")
}
}
## calculate assessment durations ################################
for( i in 1:length(data.df) ){
## current variable name
var.name <- names(data.df)[i]
if( endsWith(var.name,"Start") ){
## find the root and make a duration version
var.root <- strsplit(var.name,"Start")[[1]]
var.dur <- paste0(var.root,"Duration")
## calculate by seconds and convert from difftime class
data.df[[var.dur]] <- as.numeric(difftime(data.df[[paste0(var.root,"End")]],
data.df[[var.name]],
units="s"))
}
}   ## end duration calculation
BaseFolder <- "/Users/discoraj/Documents/mayberglab/shiny/Summit_TRD_20210515_shiny/data"
setwd(BaseFolder)
suppressPackageStartupMessages(library(shiny))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(shinydashboard))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(RColorBrewer))
suppressPackageStartupMessages(library(scales))
# suppressPackageStartupMessages(library(openxlsx))
## clean up
rm(list=ls())
## for the wrong dates on the server
Sys.setenv(TZ="America/New_York")
## helper functions #############################
## for extracting phase letter
PhaseLetter_fun <- function(Phase){
if( Phase %in% c("Surgery","TurnOn","Screening","Pre") ){
PhaseOut <- as.character(Phase)
} else {
PhaseOut <- substr(as.character(Phase),1,1)
}
return(PhaseOut)
}
## for extracting date/time from session string
DateTime_fun <- function(dt){
## split by _
dt.txt <- strsplit(as.character(dt),"_")[[1]]
len.dt <- length(dt.txt) ## start from the end
## make string for date time
dt.out <- paste0(dt.txt[len.dt-5],"-",
dt.txt[len.dt-4],"-",
dt.txt[len.dt-3]," ",
dt.txt[len.dt-2],":",
dt.txt[len.dt-1],":",
dt.txt[len.dt])
return(dt.out)
}
## import csv's ####################################
## all in one "lab" measures
ratings.df <- read.csv("data/ratings.csv")
cat.df <- read.csv("data/CAT.csv")
item.lut <- read.csv("data/item_LUT.csv")   ## not used
## slider "home" measures
slider.list <- list.files(path="data",pattern="RCS*",full.names=TRUE)
file_list <- lapply(slider.list,fread,stringsAsFactors=TRUE,na.strings="")
data.df <- rbindlist(file_list,use.names=TRUE,fill=TRUE)
rm(list=c("file_list"))
## emory redcap
emory.df <- read.csv("data/emory_redcap_cleanish.csv")
## events file
events.df <- read.csv("data/events.csv")
## clean up variable types for slider data ########################
## get rid of fake zeros
data.df <- data.df[!(is.na(data.df$MoodAssessmentStart)),]
## make main phase by letter
data.df$PhaseLetter <- sapply(data.df$Phase,PhaseLetter_fun)
data.df$PhaseLetter <- factor(data.df$PhaseLetter)
## make DateTime variable from Session name
data.df$DateTime <- sapply(data.df$Session,DateTime_fun)
data.df$DateTime <- as.POSIXct(data.df$DateTime,origin="America/New_York",
format="%Y-%m-%d %H:%M:%OS")
## convert empty times to NA
data.df[data.df == "0001-01-01T00:00:00"]  <- NA
## fix date/times by checking variable name and converting to time class
for( i in 1:length(data.df) ){
var.name <- names(data.df)[i]
if( endsWith(var.name,"End") | endsWith(var.name,"Start") ){
data.df[[var.name]] <- as.POSIXct(data.df[[var.name]],
format="%Y-%m-%dT%H:%M:%OS")
}
}
## calculate assessment durations ################################
for( i in 1:length(data.df) ){
## current variable name
var.name <- names(data.df)[i]
if( endsWith(var.name,"Start") ){
## find the root and make a duration version
var.root <- strsplit(var.name,"Start")[[1]]
var.dur <- paste0(var.root,"Duration")
## calculate by seconds and convert from difftime class
data.df[[var.dur]] <- as.numeric(difftime(data.df[[paste0(var.root,"End")]],
data.df[[var.name]],
units="s"))
}
}   ## end duration calculation
## all in one "lab" measures
ratings.df <- read.csv("data/ratings.csv")
cat.df <- read.csv("data/CAT.csv")
item.lut <- read.csv("data/item_LUT.csv")   ## not used
## slider "home" measures
slider.list <- list.files(path="data",pattern="RCS*",full.names=TRUE)
file_list <- lapply(slider.list,fread,stringsAsFactors=TRUE,na.strings="")
data.df <- rbindlist(file_list,use.names=TRUE,fill=TRUE)
rm(list=c("file_list"))
runApp('~/Documents/mayberglab/shiny/Summit_TRD_20210515_shiny')
source('~/Documents/mayberglab/updated_lab_cat_ratings/Dates.R')
source('~/Documents/mayberglab/updated_lab_cat_ratings/Dates.R')
source('~/Documents/mayberglab/updated_lab_cat_ratings/Dates.R')
View(match.801)
View(match.802)
source('~/Documents/mayberglab/updated_lab_cat_ratings/Dates.R')
source('~/Documents/mayberglab/updated_lab_cat_ratings/Dates.R')
source('~/Documents/mayberglab/updated_lab_cat_ratings/Dates.R')
