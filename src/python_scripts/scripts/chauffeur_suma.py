#!/usr/bin/env python

# python3 status: compatible

### example run in ~/AFNI_data6/FT_analysis/FT/SUMA :
#  chauffeur_suma.py -surf_spec   ../SUMA/std.141*_?h.spec -surf_vol ../SUMA/FT_SurfVol.nii -prefix TEST
#
#
### example run in ~/AFNI_data6/FT_analysis/FT.surf.results:
#  chauffeur_suma.py -surf_spec   ../FT/SUMA/std.60*_?h.spec -surf_vol ../FT/SUMA/FT_SurfVol.nii -prefix TEST3 -dset_lh stats.FT.surf.lh.niml.dset -dset_rh stats.FT.surf.rh.niml.dset 
#
#
#
### and a more modern example:
# chauffeur_suma.py                                               \
#     -surf_spec std.60.FT_lh.spec std.60.FT_rh.spec              \
#     -surf_spec_dir /home/ptaylor/AFNI_data6/FT_analysis/FT/SUMA \
#     -surf_vol FT.surf_NEW_SurfVol_Alnd_Exp+orig.HEAD            \
#     -prefix APQC_SURF_001                                       \
#     -dset_lh stats.FT.surf_NEW.rh.niml.dset                     \
#     -dset_rh stats.FT.surf_NEW.rh.niml.dset


# system libraries
import sys, os

# AFNI libraries
from afnipy import lib_drive_suma as lds
from afnipy import lib_apqc_tcsh  as lat      # for str formatting

# -----------------------------------------------------------------------

#def main():
    #opts = lds.InOpts()
    #if not opts: return 1

    #rv = opts.execute()
    #if rv > 0: return 1

    #return opts.status

if __name__ == '__main__':

    opts    = lds.InOpts()
    if not opts:
        print('** ERROR: failed to even start processing options')
        sys.exit(-2)

    opts_ok = opts.process_options()
    if opts_ok > 0: 
        sys.exit(0)
    elif opts_ok < 0:
        print('** ERROR: failed when processing options')
        sys.exit(opts_ok)

    pars    = lds.suma_chauffeur_pars(opts)
    
    #    sys.exit(main())


    # ===================================================================

    # piece of the script

    str_FULL = '''#!/bin/tcsh -e\n\n'''

    str_FULL+= '''# A script automatically generated by chauffeur_suma.py\n'''

    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Top level: background environment',
                         padpost=2 )

    sss_benv = ''
    for benv in pars.all_benv.keys():
        if type(pars.all_benv[benv]) == str :
            benv_val = '''"{}"'''.format(pars.all_benv[benv])
        else:
            benv_val = '''{}'''.format(pars.all_benv[benv])
        sss_benv+= '''setenv  {}  {}\n'''.format(benv, benv_val)

    str_FULL+= ban
    str_FULL+= lat.commandize( sss_benv, cmdindent=0, 
                               ALIGNASSIGN=False, ALLEOL=False,
                               padpost=1 )

    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Top level: background vars',
                         padpost=2 )

    sss_bvar = ''
    for bvar in pars.all_bvar.keys():
        if type(pars.all_bvar[bvar]) == str :
            bvar_val = '''"{}"'''.format(pars.all_bvar[bvar])
        else:
            bvar_val = '''{}'''.format(pars.all_bvar[bvar])
        sss_bvar+= '''set {} = {}\n'''.format(bvar, bvar_val)

    str_FULL+= ban
    str_FULL+= lat.commandize( sss_bvar, cmdindent=0, 
                               ALIGNASSIGN=True, ALLEOL=False,
                               padpost=1 )

    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Top level: subject vars',
                         padpost=2 )

    sss_surf = '''
    set surf_spec_dir = "{surf_spec_dir}"
    set surf_vol = "{surf_vol}"
    set all_spec = ( {all_spec} )
    set all_hemi = ( {all_hemi} )
    set all_ldv  = ( {all_ldv} )
    set nspec    = ${{#all_spec}}
    '''.format( surf_spec_dir=pars.surf_spec_dir, 
                surf_vol=pars.surf_vol, 
                all_spec=' '.join(pars.surf_spec_list),
                all_hemi=' '.join(pars.surf_list_hemi),
                all_ldv =' '.join(pars.surf_list_ldv) )

    if pars.dset_list_lh or pars.dset_list_rh :
        sss_dset = """# 'overlay' dsets
    set all_dset_lh = ( {all_dset_lh} )
    set all_dset_rh = ( {all_dset_rh} )
    set ndset_lh    = ${{#all_dset_lh}}
    set ndset_rh    = ${{#all_dset_rh}}
    """.format( all_dset_lh=' '.join(pars.dset_list_lh),
                all_dset_rh=' '.join(pars.dset_list_rh) )

    sss_svar = ''
    for svar in pars.all_svar.keys():
        if type(pars.all_svar[svar]) == str :
            svar_val = '''"{}"'''.format(pars.all_svar[svar])
        else:
            svar_val = '''{}'''.format(pars.all_svar[svar])
        sss_svar+= '''set {} = {}\n'''.format(svar, svar_val)

    str_FULL+= ban
    str_FULL+= lat.commandize( sss_surf, cmdindent=0, 
                               ALIGNASSIGN=True, ALLEOL=False,
                               padpost=2 )
    if pars.dset_list_lh or pars.dset_list_rh :
        str_FULL+= lat.commandize( sss_dset, cmdindent=0, 
                                   ALIGNASSIGN=True, ALLEOL=False,
                                   padpost=2 )
    str_FULL+= lat.commandize( sss_svar, cmdindent=0, 
                               ALIGNASSIGN=True, ALLEOL=False,
                               padpost=1 )

    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Top level: make virtual frame',
                         padpost=1 )

    sss_xvfb = lds.make_text_xvfb_frame()

    str_FULL+= ban
    str_FULL+= sss_xvfb


    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Start SUMA', 
                         padpost=2 )

    sss_loop = lds.make_text_loop_hemi(pars, ntoggle_spec=2)

    str_FULL+= ban
    str_FULL+= sss_loop

    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Finish images', 
                         padpost=2 )

    sss_cat = lds.make_text_cat_images()

    str_FULL+= ban
    str_FULL+= sss_cat








    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Bottom level: exit messages',
                         padpost=1, padpre=4 )

    sss_exit_bad  = lds.make_text_bad_exit()
    sss_exit_good = lds.make_text_good_exit()

    str_FULL+= ban
    str_FULL+= sss_exit_bad
    str_FULL+= sss_exit_good





    # -------------------------------------------------------------------------
    # -------------------------------------------------------------------------

    if 1 :
        otcsh = 'do_test_drive_suma.tcsh'
        # write, chmod and finish

        fff = open(otcsh, 'w')
        fff.write(str_FULL)
        fff.close()

        # deal with python 2/3   27 Nov 2018 [rickr]
        try: code = eval('0o755')
        except: code = eval('0755')
        try:
            os.chmod(otcsh, code)
        except:
            omsg = "failed: chmod {} {}".format(code, otcsh)
            print(omsg)

        bye_msg = '''
        ++ Done making (executable) script to generate HTML QC:
        {}
        '''.format(otcsh)

        bye_msg = lat.commandize(bye_msg, ALLEOL=False)
        print( bye_msg )

    


    sys.exit(0)

    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Top level: AFNI/SUMA vars',
                         padpost=2 )

    # *** !!! ADD??
    # set ldv      = {svar_ldv}
    # set subj     = ....
    cmd_var = '''
    set dir_suma  = {svar_dir_suma}
    set ldv       = {svar_ldv}
    set file_spec = std.${{ldv}}.*both.spec

    '''.format( svar_dir_suma  = opts.dir_fs_suma,
                svar_spec      = opts.spec,
                svar_ldv       = opts.ldv )

    str_FULL+= lat.commandize( cmd_var, cmdindent=0, 
                               ALIGNASSIGN=True, ALLEOL=False,
                               padpost=2 )

    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'start SUMA',
                         padpost=2 )

    # set ldv      = {svar_ldv}
    cmd = '''
    suma                                
        -npb  ${portnum}                
        -spec ${dir_suma}/${file_spec}  
        -niml &
    '''

    str_FULL+= ban
    str_FULL+= lat.commandize( cmd )
